// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: links.sql

package db

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (id, original_url)
VALUES ($1, $2)
RETURNING id, original_url, created_at
`

type CreateLinkParams struct {
	ID          string `json:"id"`
	OriginalUrl string `json:"original_url"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.ID, arg.OriginalUrl)
	var i Link
	err := row.Scan(&i.ID, &i.OriginalUrl, &i.CreatedAt)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1
`

func (q *Queries) DeleteLink(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteLink, id)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, original_url, created_at FROM links
WHERE id = $1
`

func (q *Queries) GetLink(ctx context.Context, id string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink, id)
	var i Link
	err := row.Scan(&i.ID, &i.OriginalUrl, &i.CreatedAt)
	return i, err
}

const getLinkByOriginalUrl = `-- name: GetLinkByOriginalUrl :one
SELECT id, original_url, created_at FROM links
WHERE original_url = $1
`

func (q *Queries) GetLinkByOriginalUrl(ctx context.Context, originalUrl string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByOriginalUrl, originalUrl)
	var i Link
	err := row.Scan(&i.ID, &i.OriginalUrl, &i.CreatedAt)
	return i, err
}
